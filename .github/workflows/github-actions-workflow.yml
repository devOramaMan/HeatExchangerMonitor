name: HeatExchange Monitor CI/CD
on: 
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-with-docker:
    name: Test with Docker Mock Sensors
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Display repository information
        run: |
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref }}"
          echo "Event: ${{ github.event_name }}"
          echo "Workspace: ${{ github.workspace }}"
          
      - name: List repository files
        run: ls -la ${{ github.workspace }}
        
      - name: Build Docker test image
        run: |
          docker build -f containers/pytest-bdd.Dockerfile -t heat-exchanger-test .
          
      - name: Run pytest-bdd tests in Docker
        run: |
          docker run --rm \
            -e USE_MOCK_SENSORS=true \
            -e PYTHONPATH=/app \
            heat-exchanger-test \
            pytest tests/test_temperature_collector.py -v --tb=short
            
      - name: Run pytest-bdd tests with coverage
        run: |
          docker run --rm \
            -e USE_MOCK_SENSORS=true \
            -e PYTHONPATH=/app \
            heat-exchanger-test \
            pytest tests/test_temperature_collector.py --cov=therm --cov-report=term --cov-report=xml
            
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  test-package-install:
    name: Test Package Installation
    runs-on: ubuntu-latest
    needs: test-with-docker
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install package with test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"
          
      - name: Verify package installation
        env:
          USE_MOCK_SENSORS: true
        run: |
          python -c "import os; os.environ['USE_MOCK_SENSORS'] = 'true'; import therm; print(f'Package version: {therm.__version__}')"
          python -c "import os; os.environ['USE_MOCK_SENSORS'] = 'true'; from therm import TemperatureCollector; print('TemperatureCollector imported successfully')"
          
      - name: Run quick mock test
        env:
          USE_MOCK_SENSORS: true
        run: |
          python -c "
          import os; os.environ['USE_MOCK_SENSORS'] = 'true'
          from therm import TemperatureCollector
          from unittest.mock import patch
          
          config = {'T1': '28-123', 'T2': '28-456', 'T3': '28-789', 'T4': '28-012'}
          with patch.object(TemperatureCollector, '_load_device_mapping', return_value=config):
              collector = TemperatureCollector()
              print(f'Mock mode: {collector.using_mock}')
              temps = collector.read_all_temperatures()
              print(f'Sensors read: {len(temps)}')
              if temps: 
                  eff = collector.calculate_efficiency(temps)
                  print(f'Efficiency calculated: {eff is not None}')
          "

  deploy-check:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: [test-with-docker, test-package-install]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        
      - name: Display deployment readiness
        run: |
          echo "All tests passed successfully!"
          echo "Repository is ready for deployment."
          echo "Event: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref }}"
          
      - name: Create deployment artifact
        run: |
          echo "Creating deployment package..."
          tar -czf heat-exchanger-monitor.tar.gz \
            therm/ \
            features/ \
            scripts/ \
            setup.py \
            pyproject.toml \
            requirements-test.txt \
            README.md \
            pytest.ini \
            MANIFEST.in \
            containers/ \
            docker-compose.yml \
            run_docker_tests.sh
            
      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: heat-exchanger-monitor
          path: heat-exchanger-monitor.tar.gz
          retention-days: 30
